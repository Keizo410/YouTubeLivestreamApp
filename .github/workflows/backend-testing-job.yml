name: Running unit test suits in backend container.

on: 
  push:
    branches: [ master ]
    
jobs: 
  automated-testing-job: 
    runs-on: ubuntu-latest
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Create `.env` file from secrets
        run: |
          echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> .env
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> .env
          echo "FLASK_RUN_PORT=${{ secrets.FLASK_RUN_PORT }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "BASE_YT_URL=${{ secrets.BASE_YT_URL }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "HUB_URL=${{ secrets.HUB_URL }}" >> .env
          echo "BASE_TOPIC_URL=${{ secrets.BASE_TOPIC_URL }}" >> .env
          echo "TOPIC_URL=${{ secrets.TOPIC_URL }}" >> .env
          echo "NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }}" >> .env
          echo "APP_PASSWORD=${{ secrets.APP_PASSWORD }}" >> .env
          echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> .env
          echo "RECEIVER_EMAIL=${{ secrets.RECEIVER_EMAIL }}" >> .env
          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "USER=${{ secrets.USER }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          
      - name: Copy .env file to backend directory
        run: cp .env ./backend/.env

      - name: Run Docker Compose and Tests
        uses: adambirds/docker-compose-action@v1.5.0
        with:
          compose-file: "./backend/docker-compose.yml"
          up-flags: "--build"
          down-flags: "--volumes"
          test-container: "flask-web"
          test-command: "pytest tests/"
